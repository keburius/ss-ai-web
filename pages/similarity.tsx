import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import axios from "axios";
import {
  Button,
  FormControlLabel,
  ImageList,
  ImageListItem,
  ImageListItemBar,
  Slider,
  Switch,
} from "@mui/material";
import { motion } from "framer-motion";
import useIsMobile from "../hooks/useIsMobile";
import Link from "next/link";
import Image from "next/image";

const Similarity: NextPage = () => {
  const [isLoading, setIsLoading] = useState(false);
  const isMobile = useIsMobile(1023);

  const [imgUrl, setImgUrl] = useState("");
  const [imgId, setImgId] = useState<number>();
  const [score, setScore] = useState<number>(90);
  const [onlySearch, setOnlySearch] = useState(true);
  const [isNew, setIsNew] = useState(true);
  const [limit, setLimit] = useState<number>();

  const [similarImages, setSimilarImages] = useState<any>([]);

  const translateHandler = async () => {
    if (!imgUrl?.length || !limit) return;
    setIsLoading(true);
    try {
      let data = JSON.stringify({
        img_path: imgUrl,
        limit: limit,
        minimal_score: score / 100,
      });

      let config = {
        method: "post",
        maxBodyLength: Infinity,
        url: `https://similarity-api.ss.ge/search`,
        headers: {
          "Content-Type": "application/json",
        },
        data: data,
      };

      const response = (await axios.request(config)).data;
      if (response?.success) {
        setIsLoading(false);
        setSimilarImages(response.data.similar_images);
      }
    } catch (error) {
      setIsLoading(false);
      alert("error");
      console.log("Error:", error);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>SS-AI</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
        <link rel="icon" type="image/ico" href="https://ss.ge/favicon2.ico" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
      </Head>

      <main>
        {isLoading ? (
          <div className="loader-cont" style={{ zIndex: 100000 }}>
            <div className="loadingio-spinner-ripple-cmyt7s2fej9">
              <div className="ldio-8g16pyg0jxd">
                <div></div>
                <div></div>
              </div>
            </div>
          </div>
        ) : (
          <></>
        )}

        <div
          style={{
            display: "flex",
            alignItems: "center",
            flexDirection: isMobile ? "column" : "row",
            justifyContent: "space-between",
            height: isMobile ? "100%" : "calc(100vh - 20px)",
          }}
        >
          <div
            className="similar-div"
            style={{
              width: isMobile ? "100%" : "50%",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <div
              style={{
                width: isMobile ? "100%" : "500px",
                flexDirection: "column",
                display: "flex",
                gap: "20px",
                // alignItems: "center",
                justifyContent: "center",
              }}
            >
              <h1 className={"title"} style={{ color: "white" }}>
                Similarity{" "}
                <a className={"title-span"} href="https://nextjs.org">
                  Search
                </a>
              </h1>
              <div className="similar-inputs-div">
                {/* <input
                  type="number"
                  className="similar-input"
                  placeholder="Image ID"
                  onChange={(e) => setImgId(parseInt(e.target.value))}
                  value={imgId}
                /> */}
                <input
                  type="text"
                  className="similar-input"
                  placeholder="Image path"
                  onChange={(e) => setImgUrl(e.target.value)}
                  value={imgUrl}
                />
                <input
                  type="number"
                  className="similar-input"
                  placeholder="Returned Img Count"
                  onChange={(e) => setLimit(parseInt(e.target.value))}
                  value={limit}
                />
              </div>

              {/* <FormControlLabel
                control={
                  <Switch
                    checked={onlySearch}
                    onChange={() => setOnlySearch(!onlySearch)}
                    name="gilad"
                  />
                }
                label="Only Search"
                style={{
                  marginTop: "20px",
                }}
              /> */}

              <FormControlLabel
                control={
                  <Slider
                    defaultValue={score}
                    onChange={(e: any) => setScore(e?.target?.value!)}
                    aria-label="Default"
                    valueLabelDisplay="auto"
                  />
                }
                label="Similarity Rate"
                labelPlacement="top"
                style={{
                  marginTop: "20px",
                }}
              />

              <Button
                variant="outlined"
                style={{
                  marginTop: 20,
                }}
                onClick={() => translateHandler()}
              >
                Search
              </Button>
            </div>
            {isMobile ? null : (
              <motion.img
                animate={{
                  width: imgUrl?.length ? (isMobile ? "100%" : 250) : 0,
                }}
                style={{
                  marginTop: 50,
                  borderRadius: 20,
                }}
                src={imgUrl}
                alt=""
              />
            )}
          </div>
          <ImageList
            sx={{ width: isMobile ? "100%" : "50%", height: "100%" }}
            cols={isMobile ? 1 : 3}
            rowHeight={400}
          >
            {similarImages.map((image: any) => (
              <ImageListItem
                key={image.id}
                style={{
                  width: "100%",
                }}
              >
                <Link
                  href={`https://home.ss.ge/ka/udzravi-qoneba/${image.payload.application_id}`}
                  target="_blank"
                  style={{
                    width: "100%",
                  }}
                >
                  <Image
                    style={{
                      width: "100%",
                      height: "350px",
                      objectFit: "cover",
                    }}
                    width={300}
                    height={350}
                    src={`${image.payload.img_path}?w=164&h=164&fit=crop&cover=format`}
                    alt={image.payload.img_path}
                    loading="lazy"
                  />
                </Link>
                <ImageListItemBar
                  style={{ color: "white" }}
                  title={image.score}
                  position="below"
                />
              </ImageListItem>
            ))}
          </ImageList>
        </div>
      </main>
    </div>
  );
};

export default Similarity;
